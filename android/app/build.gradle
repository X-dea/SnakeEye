plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "io.xdea.snake_eye"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "io.xdea.SnakeEye"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        ndk {
            if (!project.hasProperty('target-platform')) {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            } else {
                def platforms = project.property('target-platform').split(',')
                def platformMap = [
                        'android-arm'  : 'armeabi-v7a',
                        'android-arm64': 'arm64-v8a',
                        'android-x86'  : 'x86',
                        'android-x64'  : 'x86_64',
                ]
                abiFilters = platforms.stream().map({ e ->
                    platformMap.containsKey(e) ? platformMap[e] : e
                }).toArray()
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    externalNativeBuild {
        cmake {
            path = file("src/main/cpp/CMakeLists.txt")
            version = "3.22.1"
        }
    }
}

flutter {
    source = "../.."
}
